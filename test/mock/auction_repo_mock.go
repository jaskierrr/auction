// Code generated by MockGen. DO NOT EDIT.
// Source: ./auction_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "main/internal/entities"
	grpc "main/pkg/grpc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuctionRepo is a mock of AuctionRepo interface.
type MockAuctionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuctionRepoMockRecorder
}

// MockAuctionRepoMockRecorder is the mock recorder for MockAuctionRepo.
type MockAuctionRepoMockRecorder struct {
	mock *MockAuctionRepo
}

// NewMockAuctionRepo creates a new mock instance.
func NewMockAuctionRepo(ctrl *gomock.Controller) *MockAuctionRepo {
	mock := &MockAuctionRepo{ctrl: ctrl}
	mock.recorder = &MockAuctionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuctionRepo) EXPECT() *MockAuctionRepoMockRecorder {
	return m.recorder
}

// CloseAuction mocks base method.
func (m *MockAuctionRepo) CloseAuction(ctx context.Context, in *grpc.CloseAuctionRequest) (entities.Auction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAuction", ctx, in)
	ret0, _ := ret[0].(entities.Auction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAuction indicates an expected call of CloseAuction.
func (mr *MockAuctionRepoMockRecorder) CloseAuction(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAuction", reflect.TypeOf((*MockAuctionRepo)(nil).CloseAuction), ctx, in)
}

// CreateAuction mocks base method.
func (m *MockAuctionRepo) CreateAuction(ctx context.Context, in *grpc.CreateAuctionRequest) (entities.Auction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuction", ctx, in)
	ret0, _ := ret[0].(entities.Auction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuction indicates an expected call of CreateAuction.
func (mr *MockAuctionRepoMockRecorder) CreateAuction(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuction", reflect.TypeOf((*MockAuctionRepo)(nil).CreateAuction), ctx, in)
}

// CreateLot mocks base method.
func (m *MockAuctionRepo) CreateLot(ctx context.Context, in *grpc.CreateLotRequest) (entities.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLot", ctx, in)
	ret0, _ := ret[0].(entities.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLot indicates an expected call of CreateLot.
func (mr *MockAuctionRepoMockRecorder) CreateLot(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLot", reflect.TypeOf((*MockAuctionRepo)(nil).CreateLot), ctx, in)
}

// GetBid mocks base method.
func (m *MockAuctionRepo) GetBid(ctx context.Context, in *grpc.GetBidRequest) (entities.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBid", ctx, in)
	ret0, _ := ret[0].(entities.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBid indicates an expected call of GetBid.
func (mr *MockAuctionRepoMockRecorder) GetBid(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBid", reflect.TypeOf((*MockAuctionRepo)(nil).GetBid), ctx, in)
}

// GetLot mocks base method.
func (m *MockAuctionRepo) GetLot(ctx context.Context, in *grpc.GetLotRequest) (entities.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLot", ctx, in)
	ret0, _ := ret[0].(entities.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLot indicates an expected call of GetLot.
func (mr *MockAuctionRepoMockRecorder) GetLot(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLot", reflect.TypeOf((*MockAuctionRepo)(nil).GetLot), ctx, in)
}

// PlaceBid mocks base method.
func (m *MockAuctionRepo) PlaceBid(ctx context.Context, in *grpc.PlaceBidRequest) (entities.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceBid", ctx, in)
	ret0, _ := ret[0].(entities.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceBid indicates an expected call of PlaceBid.
func (mr *MockAuctionRepoMockRecorder) PlaceBid(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceBid", reflect.TypeOf((*MockAuctionRepo)(nil).PlaceBid), ctx, in)
}
